#!/usr/bin/env python3

import sys
import os
import hashlib
import base64
import gi

gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk, GdkPixbuf, GLib

class PreyLock(Gtk.Window):
    def __init__(self, pwd, title, image_path, monitor_geometry, is_primary):
        Gtk.Window.__init__(self, title="Prey Lock")
        self.pwd = pwd
        self.is_primary = is_primary
        self.image_path = image_path

        screen_width = monitor_geometry.width
        screen_height = monitor_geometry.height
        self.move(monitor_geometry.x, monitor_geometry.y)
        self.set_size_request(screen_width, screen_height)
        self.fullscreen()
        self.set_keep_above(True)
        self.set_type_hint(Gdk.WindowTypeHint.DIALOG)
        self.set_decorated(False)
        self.set_skip_taskbar_hint(True)

        self.connect('show', self.on_window_show)
        self.connect("focus-in-event", self.on_focus_in)
        self.connect_after('show', self.on_window_show)
        self.connect('hide', self.on_window_hide)

        self.overlay = Gtk.Overlay()
        self.add(self.overlay)

        self.label = Gtk.Label(label=title)

        if self.is_primary:
            if os.path.exists(self.image_path):
                pixbuf = GdkPixbuf.Pixbuf.new_from_file(self.image_path)
                enlarged_pixbuf = pixbuf.scale_simple(
                    int(pixbuf.get_width() * 1.1),
                    int(pixbuf.get_height() * 1.1),
                    GdkPixbuf.InterpType.BILINEAR
                )
                self.image = Gtk.Image.new_from_pixbuf(enlarged_pixbuf)

            self.invalid_password_label = Gtk.Label(label="Invalid password")
            self.invalid_password_label.get_style_context().add_class("error")
            self.invalid_password_label.set_no_show_all(True)
            self.invalid_password_label.set_visible(False)

            self.password_entry = Gtk.Entry()
            self.password_entry.set_visibility(False)
            self.password_entry.set_invisible_char("*")
            self.password_entry.set_max_length(140)
            self.password_entry.set_can_focus(True)

            event_box = Gtk.EventBox()
            event_box.add(self.password_entry)
            event_box.set_can_focus(True)
            event_box.connect("key-release-event", self.on_key_press)

            vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
            if os.path.exists(self.image_path):
                vbox.pack_start(self.image, True, True, 0)
            vbox.pack_start(event_box, True, True, 0)
            vbox.pack_start(self.invalid_password_label, True, True, 0)
            vbox.pack_start(self.label, True, True, 0)

            self.overlay.add_overlay(vbox)

            vbox.set_halign(Gtk.Align.CENTER)
            vbox.set_valign(Gtk.Align.CENTER)
            
            self.label.set_margin_top(300)

            css_provider = Gtk.CssProvider()
            css_style = """
            window {
                background-color: black;
            }
            label {
                color: white;
                font-family: Sans;
                font-size: 16px;
            }
            label.error {
                color: red;
            }
            entry {
                background-color: white;
                border: none;
                outline: none;
                min-width: 350px;
                min-height: 40px;
                font-size: 16px;
            }
            """
            css_provider.load_from_data(bytes(css_style.encode()))
            Gtk.StyleContext.add_provider_for_screen(
                Gdk.Screen.get_default(),
                css_provider,
                Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION
            )
        else:
            vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
            vbox.pack_start(self.label, True, True, 0)
            self.overlay.add_overlay(vbox)
            vbox.set_halign(Gtk.Align.CENTER)
            vbox.set_valign(Gtk.Align.CENTER)

    def on_window_show(self, widget):
        if self.is_primary:
            GLib.timeout_add(100, self.attempt_focus)

    def on_window_hide(self, widget):
        Gdk.keyboard_ungrab(Gdk.CURRENT_TIME)
                        
    def attempt_focus(self):
        self.present()
        self.password_entry.grab_focus()
        result = Gdk.keyboard_grab(self.get_window(), True, Gdk.CURRENT_TIME)
        if result != Gdk.GrabStatus.SUCCESS:
            print("Warning: Could not grab the keyboard!")
                           
        return False


    def on_focus_in(self, widget, event):
        if self.is_primary:
            self.password_entry.grab_focus()

    def on_key_press(self, widget, event):
        if event.state & Gdk.ModifierType.MOD1_MASK and event.keyval == Gdk.KEY_Tab:
            return True

        if event.state & Gdk.ModifierType.MOD1_MASK and event.keyval == Gdk.KEY_F4:
            return True
        
        if event.keyval in [Gdk.KEY_Return, Gdk.KEY_KP_Enter]:
            self.on_enter_pressed()
        
        return False

    def on_enter_pressed(self):
        password = self.password_entry.get_text()
        encoded_pass = base64.b64encode(password.encode())
        md5_pass = hashlib.md5(encoded_pass).hexdigest()
        if md5_pass == self.pwd:
            print("Password match!")
            self.hide()
            os._exit(66)
        else:
            print("Wrong password!")
            self.invalid_password_label.set_visible(True)
            GLib.timeout_add(1000, self.hide_invalid_password_label)
            self.password_entry.set_text("")

    def hide_invalid_password_label(self):
        self.invalid_password_label.set_visible(False)
        return False

def write(text):
    print(text)
    sys.stdout.flush()

def main(pwd, title, image_path):
    display = Gdk.Display.get_default()
    primary_monitor = display.get_primary_monitor()
    n_monitors = display.get_n_monitors()
    for i in range(n_monitors):
        monitor = display.get_monitor(i)
        monitor_geometry = monitor.get_geometry()
        is_primary = (monitor == primary_monitor)
        window = PreyLock(pwd, title, image_path, monitor_geometry, is_primary)
        window.connect("delete-event", Gtk.main_quit)
        window.show_all()
    Gtk.main()

if __name__ == "__main__":
    if len(sys.argv) < 2 or len(sys.argv[1]) != 32:
        print("You need to pass an MD5 hexdigested string.")
        sys.exit(1)
    pwd = sys.argv[1]
    title = sys.argv[2] if len(sys.argv) > 2 else 'Prey Lock'
    image_path = sys.argv[3] if len(sys.argv) > 3 else '../lib/bg-lock.png'
    write("Process PID: %d" % os.getpid())
    main(pwd, title, image_path)