#!/bin/sh
''':'
':'; python=$(command -v python)
':'; [ -z "$python" ] || [ -n "${python##*usr*}" ] && python="/usr/bin/python3"
':'; exec "$python" "$0" "$@"
'''

#############################################
# Prey Linux Lock
# By Tomas Pollak - (c) 2010 Fork Ltd.
# http://preyproject.com
# GPLv3 License
#############################################

import os
import sys
import base64
from hashlib import md5

import gi

gi.require_version("Gtk", "3.0")
from gi.repository import Gtk
from gi.repository import GLib
from gi.repository import Gdk
from gi.repository import GdkPixbuf
from gi.repository import Pango

image_file = "/../lib/bg-lock.png"


def write(text):
    print(text)
    sys.stdout.flush()


class Lock:
    def get_md5(self, string):
        hashb64 = base64.b64encode(string.encode("utf-8"))
        return md5(hashb64).hexdigest()

    def hide_error(self):
        self.label.hide()
        return False  # stops timeout from repeating

    def enter_callback(self, widget, entry):
        hashed_text = self.get_md5(entry.get_text())
        # print hashed_text

        if hashed_text != passwd:
            write("Invalid password")
            self.label.show()
            GLib.timeout_add(3000, self.hide_error)
            return True
        else:
            enable_XF86Switch()
            print("Correctomondo. PC Unlocked.")
            # self.label.set_markup(
            #     '<span foreground="green">Very good. Access granted.</span>'
            # )
            # self.label.show()
            os._exit(66)

    def on_delete_event(self, widget, event):
        return True
        # self.window.set_keep_above(True)

    def on_focus_change(self, widget, event):
        print("Focus changed.")
        return True

    def on_window_state_change(self, widget, event):
        self.window.activate_focus()
        print("Something happened.")
        return False

    def on_key_press(self, widget, event):
        keyname = Gdk.keyval_name(event.keyval)
        # print "Key %s (%d) was pressed" % (keyname, event.keyval)
        if event.keyval > 65470 and event.keyval < 65481:  # F1 through F12
            print(("Key %s (%d) was pressed" % (keyname, event.keyval)))
            # return True
        if event.get_state() & Gdk.ModifierType.CONTROL_MASK:
            print("Control was being held down")
            # return True
        if event.get_state() & Gdk.ModifierType.MOD1_MASK:
            print("Alt was being held down")
            # return True
        if event.get_state() & Gdk.ModifierType.SHIFT_MASK:
            print("Shift was being held down")

    def scale_image(self, pixbuf, scale):
        new_width = int(scale * pixbuf.get_width())
        new_height = int(scale * pixbuf.get_height())
        # print "Scaled image to: %s x %s" % (new_width, new_height)
        return pixbuf.scale_simple(new_width, new_height, GdkPixbuf.InterpType.BILINEAR)

    def __init__(self):

        # calculate number of screens
        width = Gdk.Screen.width()
        height = Gdk.Screen.height()

        black = Gdk.RGBA()
        black.parse("black")

        ###################################
        # black bg
        ###################################

        self.bg_window = Gtk.Window.new(Gtk.WindowType.POPUP)
        self.bg_window.override_background_color(Gtk.StateType.NORMAL, black)
        self.bg_window.resize(width, height)
        self.bg_window.set_deletable(False)
        self.bg_window.show()

        # monitors = self.bg_window.get_screen().get_n_monitors()

        ###################################
        # window
        ###################################

        self.window = Gtk.Window.new(Gtk.WindowType.POPUP)
        self.window.set_title("Prey Lock")
        self.window.override_background_color(Gtk.StateType.NORMAL, black)

        # prevents window from being closed
        self.window.connect("delete_event", self.on_delete_event)
        # capture keypresses
        self.window.connect("key_press_event", self.on_key_press)

        self.window.stick()
        self.window.set_deletable(False)
        # self.window.set_focus_on_map(True)
        self.window.set_decorated(False)
        self.window.set_border_width(0)
        self.window.set_keep_above(True)
        self.window.set_resizable(False)
        self.window.fullscreen()

        #_monitor = self.window.get_display().get_primary_monitor()
        #main_screen_width = _monitor.get_geometry().width
        #main_screen_height = _monitor.get_geometry().height
        _monitor = Gdk.Screen.get_default()
        main_screen_width = _monitor.get_width()
        main_screen_height = _monitor.get_height()
        main_screen_middle = main_screen_width / 2

        # print "Main screen size: %s x %s" % (main_screen_width, main_screen_height)
        # print "Main screen middle: %s" % main_screen_middle

        vbox = Gtk.Box.new(Gtk.Orientation.VERTICAL, 0)
        vbox.set_homogeneous(False)
        vbox.set_size_request(main_screen_width, main_screen_height)
        self.window.add(vbox)
        # vbox.show()

        ###################################
        # background color and image
        ###################################

        image = Gtk.Image()
        script_path = sys.path[0]
        bg_path = script_path + image_file
        pixbuf = GdkPixbuf.Pixbuf.new_from_file(bg_path)
        image_width = pixbuf.get_width()
        image_height = pixbuf.get_height()

        # print 'Image size: %s x %s' % (image_width, image_height)
        scale = 1
        input_font = 16
        error_font = 11

        if image_width > main_screen_width or image_height > main_screen_height:
            scale = min(
                float(main_screen_width) / image_width,
                float(main_screen_height) / image_height,
            )
            pixbuf = self.scale_image(pixbuf, scale)

        elif main_screen_width > 2000:
            scale = 2
            pixbuf = self.scale_image(pixbuf, scale)
            input_font -= 2
            error_font -= 1

        image.set_from_pixbuf(pixbuf)
        image.set_size_request(main_screen_width, main_screen_height)
        image.show()
        vbox.add(image)

        ###################################
        # label
        ###################################

        self.entry = Gtk.Entry.new()
        self.entry.set_max_length(40)

        # self.entry.set_inner_border(None)  # FIXME: Ignored since Gtk 3.4
        self.entry.set_width_chars(20)
        self.entry.set_visibility(False)
        self.entry.set_has_frame(False)
        self.entry.override_background_color(
            Gtk.StateType.NORMAL, Gdk.RGBA(red=1.0, green=1.0, blue=1.0, alpha=1.0)
        )
        self.entry.override_font(Pango.FontDescription("sans " + str(input_font)))
        self.entry.set_can_focus(True)
        self.entry.grab_focus()
        self.entry.set_can_default(True)
        self.entry.set_sensitive(True)
        self.entry.set_input_purpose(Gtk.InputPurpose.PASSWORD)

        self.entry.connect("activate", self.enter_callback, self.entry)
        # self.entry.show()

        input_size = 140
        padding_left = int(input_size * scale)
        padding_top = 5 * scale
        # print 'Padding: left %s, top %s' % (padding_left, padding_top)

        # if image was scaled down, calculate offset for positioning elements
        if image_height > main_screen_height:
            padding_top = 18 - int((image_height - main_screen_height) / 8)

        x_position = main_screen_middle - padding_left
        y_position = -(main_screen_height / 2) + padding_top
        # print "Fixed position: %s, %s" % (x_position, y_position)

        fixed = Gtk.Fixed.new()
        fixed.put(self.entry, x_position, y_position)
        fixed.show()
        vbox.pack_start(fixed, False, False, 0)

        text = "Invalid password. Access denied."
        self.label = Gtk.Label()
        self.label.set_markup('<span foreground="#b22222">' + text + "</span>")
        self.label.override_font(Pango.FontDescription("sans " + str(error_font)))
        # self.label.set_size_request(main_screen_width, 30)

        fixed2 = Gtk.Fixed.new()
        # push label down a bit, and left a bit so it remains centered
        fixed2.put(self.label, x_position + 20, y_position + (46 * scale))
        vbox.pack_start(fixed2, False, False, 0)


        ###################################
        # optional message
        ###################################

        if msgtext != "":
            self.label2 = Gtk.Label()
            self.label2.set_justify(2)
            newtext, label_width = setLineBreaks(msgtext, findOccurrences(msgtext, " "), 100)

            self.label2.set_markup('<span foreground="#FFFFFF">'+newtext+'</span>')
            fixed3 = Gtk.Fixed.new()
            fixed3.put(self.label2, main_screen_width/2 -(label_width*6.5)/2, y_position + (100 * scale))
            fixed3.show()
            vbox.pack_start(fixed3, False, False, 0)

        ##############################################

        #disable_XF86Switch()

        self.window.show_all()
        # self.window.set_focus(self.entry)
        seat = self.window.get_display().get_default_seat()
       
        self.label.hide()


original_keycodes = []


def enable_XF86Switch():
    import subprocess  # need at least python 2.4

    try:
        for x, y, z in original_keycodes:
            cmd = ["xmodmap", "-e", "keycode %s=%s %s" % (x, y, z)]
            subprocess.Popen(cmd)
    except (OSError, subprocess.CalledProcessError):
        return


def disable_XF86Switch():
    import subprocess  # need at least python 2.4
    import re

    try:
        cmd = ["xmodmap", "-pk"]
        # find all keys that allows switching to a VT
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        output, serror = p.communicate()
        matched = []

        # retrieve the keycode and its value from xmodmap output
        for line in output.split("\n"):
            if re.search("XF86Switch_VT", line):
                items = line.split()
                keycode = items[0]
                keysym = items[1]
                keysym2 = items[7]
                keyname = items[2][1:-1]
                matched.append((keycode, keyname))
                original_keycodes.append((keycode, keysym, keysym2))

        # disable all key that allow to switch to a VT
        for k, v in matched:
            cmd = ["xmodmap", "-e", "keycode %s=%s" % (k, v)]
            subprocess.Popen(cmd)

    except IndexError:
        print("Couldn't parse Xmodmap list.")

    except (OSError, subprocess.CalledProcessError):
        # print "Xmodmap not found"
        # do nothing if xmodmap is not found or return an error
        return

def findOccurrences(str, ch):
    return [i for i, letter in enumerate(str) if letter == ch]

def setLineBreaks(string, arr, maxLength):
    lineLength = maxLength
    longerLine = 0
    output = ""

    if (len(string) < maxLength):
        longerLine = len(string)
        return string, longerLine

    value0 = 0
    for index, value in enumerate(arr):
        diff = maxLength - value

        if index == len(arr) - 1:
            output += string[value0:]

        if (diff >= 0 and diff < 10) or diff < 0:
            if len(string[value0:value]) > longerLine:
                longerLine = len(string[value0:value])
            output += string[value0:value] + "\n"
            value0 = value
            maxLength += lineLength

    return " " + output, longerLine

if __name__ == "__main__":

    msgtext = ""
    if len(sys.argv) < 2 or len(sys.argv[1]) != 32:
        print("You need to pass an MD5 hexdigested string.")
        sys.exit(67)
    else:
        passwd = sys.argv[1]
        if len(sys.argv) > 2:
            msgtext = sys.argv[2]

    print(msgtext)

    write("Process PID: %d" % os.getpid())
    lock = Lock()
    Gtk.main()
